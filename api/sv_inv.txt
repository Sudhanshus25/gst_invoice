<?php
require_once __DIR__ . '/../includes/db_connect.php';

header('Content-Type: application/json');

$db = new Database();
$conn = $db->getConnection();

// Get JSON input
$input = file_get_contents('php://input');
$data = json_decode($input, true);

// Verify we received valid JSON
if (json_last_error() !== JSON_ERROR_NONE) {
    http_response_code(400);
    echo json_encode(['success' => false, 'error' => 'Invalid JSON data']);
    exit;
}

function findOrCreateCustomer($conn, $customerData) {
    if (empty($customerData['gstin'])) {
        $stmt = $conn->prepare("SELECT id FROM customers WHERE name = :name AND billing_address = :billing_address LIMIT 1");
        $stmt->execute([
            ':name' => $customerData['name'],
            ':billing_address' => $customerData['billing_address'] ?? ''
        ]);
    } else {
        $stmt = $conn->prepare("SELECT id FROM customers WHERE gstin = :gstin LIMIT 1");
        $stmt->execute([':gstin' => $customerData['gstin']]);
    }
    
    $existing = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if ($existing) {
        return $existing['id'];
    }
    
    // Create new customer
    $stmt = $conn->prepare("
        INSERT INTO customers (
            name, gstin, pan, phone, email, billing_address, shipping_address, state_code
        ) VALUES (
            :name, :gstin, :pan, :phone, :email, :billing_address, :shipping_address, :state_code
        )
    ");
    
    $stmt->execute([
        ':name' => $customerData['name'],
        ':gstin' => $customerData['gstin'] ?? '',
        ':pan' => !empty($customerData['gstin']) ? substr($customerData['gstin'], 2, 10) : '',
        ':phone' => $customerData['phone'] ?? '',
        ':email' => $customerData['email'] ?? '',
        ':billing_address' => $customerData['billing_address'] ?? '',
        ':shipping_address' => $customerData['shipping_address'] ?? '',
        ':state_code' => $customerData['state'] ?? ''
    ]);
    
    return $conn->lastInsertId();
}

try {
    // Begin transaction
    $conn->beginTransaction();
    
    // Validate minimum required data for a draft
    if (empty($data['customer']['name'])) {
        throw new Exception("Customer name is required");
    }
    
    // Generate invoice number if not provided (for drafts)
    if (empty($data['invoice']['number'])) {
        $prefix = 'DRAFT';
        $year = date('y');
        $month = date('m');
        $sequence = mt_rand(100, 999);
        $data['invoice']['number'] = "{$prefix}{$year}{$month}-{$sequence}";
    }

    // Set default dates if not provided
    $data['invoice']['date'] = $data['invoice']['date'] ?? date('Y-m-d');
    $data['invoice']['due_date'] = $data['invoice']['due_date'] ?? date('Y-m-d', strtotime('+15 days'));
    
    // Get customer ID
    $customerId = findOrCreateCustomer($conn, $data['customer']);
    $businessState = '24'; // Your business state code
    
    // Initialize totals
    $subtotal = 0;
    $totalDiscount = 0;
    $totalTax = 0;
    $cgstAmount = 0;
    $sgstAmount = 0;
    $igstAmount = 0;
    
    // Calculate totals if items exist
    if (!empty($data['items']) && is_array($data['items'])) {
        foreach ($data['items'] as $item) {
            $quantity = floatval($item['quantity'] ?? 1);
            $rate = floatval($item['rate'] ?? 0);
            $discountPercentage = floatval($item['discount_percentage'] ?? 0);
            
            $itemAmount = $quantity * $rate;
            $discountAmount = $itemAmount * ($discountPercentage / 100);
            $taxableValue = $itemAmount - $discountAmount;
            
            // Determine tax rates based on customer state
            $isSameState = ($data['customer']['state'] ?? '') === $businessState;
            
            if ($isSameState) {
                $itemCgst = $taxableValue * 0.09; // 9% CGST
                $itemSgst = $taxableValue * 0.09; // 9% SGST
                $itemIgst = 0;
            } else {
                $itemCgst = 0;
                $itemSgst = 0;
                $itemIgst = $taxableValue * 0.18; // 18% IGST
            }
            
            $subtotal += $itemAmount;
            $totalDiscount += $discountAmount;
            $cgstAmount += $itemCgst;
            $sgstAmount += $itemSgst;
            $igstAmount += $itemIgst;
            $totalTax += $itemCgst + $itemSgst + $itemIgst;
        }
    }
    
    $grandTotal = $subtotal - $totalDiscount + $totalTax;
    
    // Save the invoice
    $stmt = $conn->prepare("
        INSERT INTO invoices (
            invoice_number, invoice_date, due_date, customer_id,
            subtotal, discount_amount, cgst_amount, sgst_amount, igst_amount,
            tax_amount, total, tax_type, place_of_supply,
            supply_type, payment_status, notes, terms, status
        ) VALUES (
            :invoice_number, :invoice_date, :due_date, :customer_id,
            :subtotal, :discount_amount, :cgst_amount, :sgst_amount, :igst_amount,
            :tax_amount, :total, :tax_type, :place_of_supply,
            :supply_type, :payment_status, :notes, :terms, :status
        )
    ");
    
    $stmt->execute([
        ':invoice_number' => $data['invoice']['number'],
        ':invoice_date' => $data['invoice']['date'],
        ':due_date' => $data['invoice']['due_date'],
        ':customer_id' => $customerId,
        ':subtotal' => $subtotal,
        ':discount_amount' => $totalDiscount,
        ':cgst_amount' => $cgstAmount,
        ':sgst_amount' => $sgstAmount,
        ':igst_amount' => $igstAmount,
        ':tax_amount' => $totalTax,
        ':total' => $grandTotal,
        ':tax_type' => ($data['customer']['state'] ?? '') === $businessState ? 'cgst_sgst' : 'igst',
        ':place_of_supply' => $data['customer']['state'] ?? '',
        ':supply_type' => $data['invoice']['supply_type'] ?? 'regular',
        ':payment_status' => $data['invoice']['payment_status'] ?? 'unpaid',
        ':notes' => $data['invoice']['notes'] ?? '',
        ':terms' => $data['invoice']['terms'] ?? '',
        ':status' => $data['status'] ?? 'draft' // Add status field
    ]);
    
    $invoiceId = $conn->lastInsertId();
    
    // Save items if they exist
    if (!empty($data['items']) && is_array($data['items'])) {
        foreach ($data['items'] as $item) {
            $quantity = floatval($item['quantity'] ?? 1);
            $rate = floatval($item['rate'] ?? 0);
            $discountPercentage = floatval($item['discount_percentage'] ?? 0);
            
            $itemAmount = $quantity * $rate;
            $discountAmount = $itemAmount * ($discountPercentage / 100);
            $taxableValue = $itemAmount - $discountAmount;
            
            $isSameState = ($data['customer']['state'] ?? '') === $businessState;
            
            if ($isSameState) {
                $itemCgst = $taxableValue * 0.09;
                $itemSgst = $taxableValue * 0.09;
                $itemIgst = 0;
            } else {
                $itemCgst = 0;
                $itemSgst = 0;
                $itemIgst = $taxableValue * 0.18;
            }
            
            $itemTotal = $taxableValue + $itemCgst + $itemSgst + $itemIgst;
            
            $stmt = $conn->prepare("
                INSERT INTO invoice_items (
                    invoice_id, product_id, description, hsn_sac_code, quantity, unit, rate, 
                    discount_percentage, discount_amount, taxable_value, 
                    cgst_rate, sgst_rate, igst_rate, 
                    cgst_amount, sgst_amount, igst_amount, total_amount
                ) VALUES (
                    :invoice_id, :product_id, :description, :hsn_sac_code, :quantity, :unit, :rate, 
                    :discount_percentage, :discount_amount, :taxable_value, 
                    :cgst_rate, :sgst_rate, :igst_rate, 
                    :cgst_amount, :sgst_amount, :igst_amount, :total_amount
                )
            ");
            
            $stmt->execute([
                ':invoice_id' => $invoiceId,
                ':product_id' => $item['product_id'] ?? null,
                ':description' => $item['description'] ?? '',
                ':hsn_sac_code' => $item['hsn_sac'] ?? '',
                ':quantity' => $quantity,
                ':unit' => $item['unit'] ?? 'unit',
                ':rate' => $rate,
                ':discount_percentage' => $discountPercentage,
                ':discount_amount' => $discountAmount,
                ':taxable_value' => $taxableValue,
                ':cgst_rate' => $isSameState ? 9 : 0,
                ':sgst_rate' => $isSameState ? 9 : 0,
                ':igst_rate' => $isSameState ? 0 : 18,
                ':cgst_amount' => $itemCgst,
                ':sgst_amount' => $itemSgst,
                ':igst_amount' => $itemIgst,
                ':total_amount' => $itemTotal
            ]);
        }
    }
    
    // Commit transaction
    $conn->commit();
    
    echo json_encode([
        'success' => true, 
        'invoice_id' => $invoiceId,
        'invoice_number' => $data['invoice']['number'],
        'message' => 'Invoice saved successfully as draft'
    ]);
    
} catch (Exception $e) {
    $conn->rollBack();
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'error' => 'Failed to save invoice: ' . $e->getMessage(),
        'input_data' => $data // For debugging only - remove in production
    ]);
}